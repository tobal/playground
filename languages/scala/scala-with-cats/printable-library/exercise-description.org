* Exercise: Printable Library
  Scala provides a ~toString~ method to let us convert any value to a ~String~. However, this method comes
  with a few disadvantages: it is implemented for /every/ type in the language, many implementations are of
  limited use, and we can’t opt-in to specific implementations for specific types.

  Let’s define a ~Printable~ type class to work around these problems:
  1. Define a type class ~Printable[A]~ containing a single method ~format~. ~format~ should accept a value
   of type ~A~ and return a ~String~.
  2. Create an object ~PrintableInstances~ containing instances of ~Printable~ for ~String~ and ~Int~.
  3. Define an object ~Printable~ with two generic interface methods:
    - ~format~ accepts a value of type ~A~ and a ~Printable~ of the corresponding type. It uses the relevant ~Printable~ to convert the ~A~ to a ~String~.
    - ~print~ accepts the same parameters as ~format~ and returns ~Unit~. It prints the ~A~ value to the console using ~println~.
** Using the Library
   The code above forms a general purpose printing library that we can use in multiple applications. Let’s
   define an “application” now that uses the library.

   First we’ll define a data type to represent a well-known type of furry animal:
   #+BEGIN_SRC scala
final case class Cat(name: String, age: Int, color: String)
   #+END_SRC
   Next we’ll create an implementation of Printable for Cat that returns content in the following format:
   #+BEGIN_SRC
NAME is a AGE year-old COLOR cat.
   #+END_SRC
   Finally, use the type class on the console or in a short demo app: create a Cat and print it to the console:
   #+BEGIN_SRC scala
// Define a cat:
val cat = Cat(/* ... */)

// Print the cat!
   #+END_SRC
** Better Syntax
   Let’s make our printing library easier to use by defining some extension methods to provide better syntax:
   1. Create an object called ~PrintableSyntax~.
   2. Inside ~PrintableSyntax~ define an ~implicit class PrintableOps[A]~ to wrap up a value of type ~A~.
   3. In PrintableOps define the following methods:
      - ~format~ accepts an implicit ~Printable[A]~ and returns a ~String~ representation of the wrapped ~A~;
      - ~print~ accepts an implicit ~Printable[A]~ and returns ~Unit~. It prints the wrapped ~A~ to the console.
   4. Use the extension methods to print the example ~Cat~ you created in the previous exercise.
